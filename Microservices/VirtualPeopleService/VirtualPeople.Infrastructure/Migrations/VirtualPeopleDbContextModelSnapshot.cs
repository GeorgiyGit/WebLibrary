// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VirtualPeople.Infrastructure;

#nullable disable

namespace VirtualPeople.Infrastructure.Migrations
{
    [DbContext(typeof(VirtualPeopleDbContext))]
    partial class VirtualPeopleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeamBookTranslationTeam", b =>
                {
                    b.Property<int>("InPlansBooksId")
                        .HasColumnType("int");

                    b.Property<int>("InPlansTeamsId")
                        .HasColumnType("int");

                    b.HasKey("InPlansBooksId", "InPlansTeamsId");

                    b.HasIndex("InPlansTeamsId");

                    b.ToTable("TeamBookTranslationTeam");
                });

            modelBuilder.Entity("TeamBookTranslationTeam1", b =>
                {
                    b.Property<int>("CanceledBooksId")
                        .HasColumnType("int");

                    b.Property<int>("CanceledTeamsId")
                        .HasColumnType("int");

                    b.HasKey("CanceledBooksId", "CanceledTeamsId");

                    b.HasIndex("CanceledTeamsId");

                    b.ToTable("TeamBookTranslationTeam1");
                });

            modelBuilder.Entity("TeamBookTranslationTeam2", b =>
                {
                    b.Property<int>("InProcessBooksId")
                        .HasColumnType("int");

                    b.Property<int>("InProcessTeamsId")
                        .HasColumnType("int");

                    b.HasKey("InProcessBooksId", "InProcessTeamsId");

                    b.HasIndex("InProcessTeamsId");

                    b.ToTable("TeamBookTranslationTeam2");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.Books.TeamBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("TeamBooks");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.People.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedCustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookCount")
                        .IsDescending();

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.People.TranslationTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembersCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TranslationTeam");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.People.TranslationTeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TranslationTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TranslationTeamId");

                    b.ToTable("TranslationTeamMembers");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.People.TranslationTeamMemberRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("TranslationTeamMemberRoles");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.Shared.TranslationTeamMemberRoleTranslatedText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ValueEntityId");

                    b.ToTable("TranslationTeamMemberRoleTranslatedTexts");
                });

            modelBuilder.Entity("TeamBookTranslationTeam", b =>
                {
                    b.HasOne("VirtualPeople.Domain.Entities.Books.TeamBook", null)
                        .WithMany()
                        .HasForeignKey("InPlansBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualPeople.Domain.Entities.People.TranslationTeam", null)
                        .WithMany()
                        .HasForeignKey("InPlansTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamBookTranslationTeam1", b =>
                {
                    b.HasOne("VirtualPeople.Domain.Entities.Books.TeamBook", null)
                        .WithMany()
                        .HasForeignKey("CanceledBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualPeople.Domain.Entities.People.TranslationTeam", null)
                        .WithMany()
                        .HasForeignKey("CanceledTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamBookTranslationTeam2", b =>
                {
                    b.HasOne("VirtualPeople.Domain.Entities.Books.TeamBook", null)
                        .WithMany()
                        .HasForeignKey("InProcessBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualPeople.Domain.Entities.People.TranslationTeam", null)
                        .WithMany()
                        .HasForeignKey("InProcessTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.People.TranslationTeamMember", b =>
                {
                    b.HasOne("VirtualPeople.Domain.Entities.People.TranslationTeamMemberRole", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualPeople.Domain.Entities.People.TranslationTeam", "TranslationTeam")
                        .WithMany("Members")
                        .HasForeignKey("TranslationTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("TranslationTeam");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.Shared.TranslationTeamMemberRoleTranslatedText", b =>
                {
                    b.HasOne("VirtualPeople.Domain.Entities.People.TranslationTeamMemberRole", "ValueEntity")
                        .WithMany("Names")
                        .HasForeignKey("ValueEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValueEntity");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.People.TranslationTeam", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("VirtualPeople.Domain.Entities.People.TranslationTeamMemberRole", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Names");
                });
#pragma warning restore 612, 618
        }
    }
}
