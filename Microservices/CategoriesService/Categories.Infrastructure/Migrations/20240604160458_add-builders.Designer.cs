// <auto-generated />
using System;
using Categories.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Categories.Infrastructure.Migrations
{
    [DbContext(typeof(CategoriesDbContext))]
    [Migration("20240604160458_add-builders")]
    partial class addbuilders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookTag", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("Categories.Domain.Entities.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Categories.Domain.Entities.TagTranslatedText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ValueEntityId");

                    b.ToTable("TagTranslatedTexts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageCode = "en-US",
                            Value = "English",
                            ValueEntityId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageCode = "sk-SK",
                            Value = "Angličtina",
                            ValueEntityId = 1
                        },
                        new
                        {
                            Id = 3,
                            LanguageCode = "en-US",
                            Value = "Slovak",
                            ValueEntityId = 2
                        },
                        new
                        {
                            Id = 4,
                            LanguageCode = "sk-SK",
                            Value = "Slovenčina",
                            ValueEntityId = 2
                        });
                });

            modelBuilder.Entity("Categories.Domain.Entities.TagTypeTranslatedText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ValueEntityId");

                    b.ToTable("TagTypeTranslatedTexts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageCode = "en-US",
                            Value = "Languages",
                            ValueEntityId = "LanguageTag"
                        },
                        new
                        {
                            Id = 2,
                            LanguageCode = "sk-SK",
                            Value = "Jazyky",
                            ValueEntityId = "LanguageTag"
                        },
                        new
                        {
                            Id = 3,
                            LanguageCode = "en-US",
                            Value = "Tag",
                            ValueEntityId = "Tag"
                        },
                        new
                        {
                            Id = 4,
                            LanguageCode = "sk-SK",
                            Value = "Štítok",
                            ValueEntityId = "Tag"
                        },
                        new
                        {
                            Id = 5,
                            LanguageCode = "en-US",
                            Value = "Type",
                            ValueEntityId = "BookType"
                        },
                        new
                        {
                            Id = 6,
                            LanguageCode = "sk-SK",
                            Value = "Typ",
                            ValueEntityId = "BookType"
                        });
                });

            modelBuilder.Entity("Categories.Domain.Entities.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataCreationTime = new DateTime(2024, 6, 4, 16, 4, 57, 564, DateTimeKind.Utc).AddTicks(3474),
                            IsDeleted = false,
                            IsEdited = false,
                            TypeId = "LanguageTag"
                        },
                        new
                        {
                            Id = 2,
                            DataCreationTime = new DateTime(2024, 6, 4, 16, 4, 57, 564, DateTimeKind.Utc).AddTicks(3479),
                            IsDeleted = false,
                            IsEdited = false,
                            TypeId = "LanguageTag"
                        });
                });

            modelBuilder.Entity("Categories.Domain.Entities.Tags.TagType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCancelable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompraced")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TagTypes");

                    b.HasData(
                        new
                        {
                            Id = "LanguageTag",
                            IsCancelable = true,
                            IsCompraced = true
                        },
                        new
                        {
                            Id = "Tag",
                            IsCancelable = true,
                            IsCompraced = false
                        },
                        new
                        {
                            Id = "BookType",
                            IsCancelable = true,
                            IsCompraced = true
                        });
                });

            modelBuilder.Entity("BookTag", b =>
                {
                    b.HasOne("Categories.Domain.Entities.Books.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Categories.Domain.Entities.Tags.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Categories.Domain.Entities.TagTranslatedText", b =>
                {
                    b.HasOne("Categories.Domain.Entities.Tags.Tag", "ValueEntity")
                        .WithMany("Names")
                        .HasForeignKey("ValueEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValueEntity");
                });

            modelBuilder.Entity("Categories.Domain.Entities.TagTypeTranslatedText", b =>
                {
                    b.HasOne("Categories.Domain.Entities.Tags.TagType", "ValueEntity")
                        .WithMany("Names")
                        .HasForeignKey("ValueEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValueEntity");
                });

            modelBuilder.Entity("Categories.Domain.Entities.Tags.Tag", b =>
                {
                    b.HasOne("Categories.Domain.Entities.Tags.TagType", "Type")
                        .WithMany("Tags")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Categories.Domain.Entities.Tags.Tag", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("Categories.Domain.Entities.Tags.TagType", b =>
                {
                    b.Navigation("Names");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
